
let s:source = { 'name' : 'cabal' }

function! s:source.gather_candidates(...) abort "{{{
    return map([
                \ 'executable',
                \ 'library',
                \ 'benchmark',
                \ 'test-suite',
                \ 'flag',
                \ 'author',
                \ 'bug-reports',
                \ 'buildable',
                \ 'build-depends',
                \ 'build-tools',
                \ 'build-type',
                \ 'cabal-version',
                \ 'category',
                \ 'cc-options',
                \ 'copyright',
                \ 'cpp-options',
                \ 'c-sources',
                \ 'data-dir',
                \ 'data-files',
                \ 'default',
                \ 'description',
                \ 'exposed-modules',
                \ 'exposed',
                \ 'extensions',
                \ 'extra-lib-dirs',
                \ 'extra-libraries',
                \ 'extra-source-files',
                \ 'extra-tmp-files',
                \ 'frameworks',
                \ 'ghc-options',
                \ 'ghc-prof-options',
                \ 'ghc-shared-options',
                \ 'homepage',
                \ 'hs-source-dirs',
                \ 'hugs-options',
                \ 'include-dirs',
                \ 'includes',
                \ 'install-includes',
                \ 'jhc-options',
                \ 'ld-options',
                \ 'license-file',
                \ 'license',
                \ 'location',
                \ 'main-is',
                \ 'maintainer',
                \ 'name',
                \ 'nhc98-options',
                \ 'other-modules',
                \ 'package-url',
                \ 'pkgconfig-depends',
                \ 'source-repository',
                \ 'stability',
                \ 'synopsis',
                \ 'tag',
                \ 'tested-with',
                \ 'type',
                \ 'version',
                \ 'Arrows',
                \ 'BangPatterns',
                \ 'ConstrainedClassMethods',
                \ 'DeriveDataTypeable',
                \ 'DisambiguateRecordFields',
                \ 'EmptyDataDecls',
                \ 'CPP',
                \ 'ExistentialQuantification',
                \ 'ExtendedDefaultRules',
                \ 'ExtensibleRecords',
                \ 'FlexibleContexts',
                \ 'FlexibleInstances',
                \ 'ForeignFunctionInterface',
                \ 'FunctionalDependencies',
                \ 'GADTs',
                \ 'GeneralizedNewtypeDeriving',
                \ 'Generics',
                \ 'HereDocuments',
                \ 'ImplicitParams',
                \ 'ImpredicativeTypes',
                \ 'IncoherentInstances',
                \ 'KindSignatures',
                \ 'LiberalTypeSynonyms',
                \ 'MagicHash',
                \ 'MultiParamTypeClasses',
                \ 'NamedFieldPuns',
                \ 'NewQualifiedOperators',
                \ 'NoImplicitPrelude',
                \ 'NoMonomorphismRestriction',
                \ 'NoMonoPatBinds',
                \ 'OverlappingInstances',
                \ 'OverloadedStrings',
                \ 'PackageImports',
                \ 'ParallelListComp',
                \ 'PatternGuards',
                \ 'PatternSignatures',
                \ 'PolymorphicComponents',
                \ 'PostfixOperators',
                \ 'QuasiQuotes',
                \ 'Rank2Types',
                \ 'RankNTypes',
                \ 'RecordPuns',
                \ 'RecordWildCards',
                \ 'RecursiveDo',
                \ 'RelaxedPolyRec',
                \ 'RestrictedTypeSynonyms',
                \ 'ScopedTypeVariables',
                \ 'StandaloneDeriving',
                \ 'TemplateHaskell',
                \ 'TransformListComp',
                \ 'TypeFamilies',
                \ 'TypeOperators',
                \ 'TypeSynonymInstances',
                \ 'UnboxedTuples',
                \ 'UndecidableInstances',
                \ 'UnicodeSyntax',
                \ 'UnliftedFFITypes',
                \ 'ViewPatterns',
                \ 'os',
                \ 'arch',
                \ 'implflag',
                \ 'true',
                \ 'false',
                \ 'Configure',
                \ 'Custom',
                \ 'Make',
                \ 'Simple'
                \ ], '{ "word": v:val }')
endfunction "}}}

function! neocomplete#sources#cabal#define() abort "{{{
    return s:source
endfunction "}}}
