#!/usr/bin/python

import sys, os, re
import subprocess

debugging = False

def get_project_dir():
    pw = os.getcwd()
    while True:
        if pw == "/":
            return (".", None, None)
        for f in os.listdir(pw):
            if re.search("\.cabal$", f):
                if os.path.isfile(os.path.join(pw, f)):
                    if os.path.isfile(os.path.join(pw, "stack.yaml")):
                        return (pw, f, "stack.yaml")
                    else:
                        return (pw, f, None)
        pw = os.path.normpath(pw + "/..")

def main():
    # parse options
    if 2 <= len(sys.argv):
        if sys.argv[1] == "-d" or sys.argv[1] == "--debug":
            debugging = True
            del sys.argv[1]

    # check if using stack
    project_dir, cabal_file_name, stack_file_name = get_project_dir()
    if stack_file_name == None:
        call_hoogle = ["hoogle"]
    else:
        call_hoogle = ["stack", "exec", "--", "hoogle"]

    # do a main job
    if len(sys.argv) < 2:
        estat = subprocess.call(call_ghc_mod + sys.argv[1:])
        record_ghc_mod_invocation(sys.argv)
        sys.exit(estat >> 8)

    if sys.argv[1] == "browse":
        ghc_mod_cache_dir = os.path.join(project_dir, ".ghcmodcache")
        if not os.path.exists(ghc_mod_cache_dir):
            os.mkdir(ghc_mod_cache_dir)
        module_name, canonical_option_coded = encode_options(sys.argv[2:])
        (is_user_module, module_path_if_any) = check_if_module_is_user(project_dir, module_name)
        cached_file_name = os.path.join(ghc_mod_cache_dir, module_name + "-" + canonical_option_coded)
        if not os.path.exists(cached_file_name) or (is_user_module and cache_outdated(cached_file_name, module_path_if_any)):
            with open(cached_file_name, "w") as f:
                record_ghc_mod_invocation(sys.argv)
                if is_user_module:
                    os.chdir(project_dir)
                    estat = subprocess.call(call_ghc_mod + sys.argv[1:], stdout=f)
                else:
                    estat = subprocess.call(call_ghc_mod + sys.argv[1:], stdout=f)
            if estat != 0: sys.exit(estat >> 8)
        with open(cached_file_name, "r") as f:
            print f.read(),
            sys.exit(0)
        sys.exit(2)

    record_ghc_mod_invocation(sys.argv)
    estat = subprocess.call(call_ghc_mod + sys.argv[1:])
    sys.exit(estat >> 8)

if __name__ == "__main__":
    main()
